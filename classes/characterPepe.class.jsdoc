/**
 * Klasse, die den Charakter Pepe im Spiel darstellt und von `MovableObject` erbt.
 * Diese Klasse verwaltet die verschiedenen Zustände und Bewegungen von Pepe,
 * wie das Gehen, Springen, Stehen, und das Überprüfen von Kollisionen mit Feinden und Objekten.
 * Sie enthält auch Logik für den Umgang mit den Lebenspunkten des Charakters und seinen Interaktionen
 * mit der Welt.
 */
class CharacterPepe extends MovableObject {
    /**
     * Bilder für den Idle-Zustand des Charakters (Stehen).
     * @type {string[]}
     */
    imagesIdle = [
        'assets/2_character_pepe/1_idle/idle/I-1.png',
        'assets/2_character_pepe/1_idle/idle/I-2.png',
        'assets/2_character_pepe/1_idle/idle/I-3.png',
        'assets/2_character_pepe/1_idle/idle/I-4.png',
        'assets/2_character_pepe/1_idle/idle/I-5.png',
        'assets/2_character_pepe/1_idle/idle/I-6.png'
    ];

    /**
     * Bilder für den Geh-Zustand des Charakters.
     * @type {string[]}
     */
    imagesWalk = [
        'assets/2_character_pepe/2_walk/W-21.png',
        'assets/2_character_pepe/2_walk/W-22.png',
        'assets/2_character_pepe/2_walk/W-23.png',
        'assets/2_character_pepe/2_walk/W-24.png',
        'assets/2_character_pepe/2_walk/W-25.png',
        'assets/2_character_pepe/2_walk/W-26.png'
    ];

    /**
     * Bilder für den Sprung-Zustand des Charakters.
     * @type {string[]}
     */
    imagesJump = [
        'assets/2_character_pepe/3_jump/J-31.png',
        'assets/2_character_pepe/3_jump/J-32.png',
        'assets/2_character_pepe/3_jump/J-33.png',
        'assets/2_character_pepe/3_jump/J-34.png',
        'assets/2_character_pepe/3_jump/J-35.png',
        'assets/2_character_pepe/3_jump/J-36.png',
        'assets/2_character_pepe/3_jump/J-37.png',
        'assets/2_character_pepe/3_jump/J-38.png',
        'assets/2_character_pepe/3_jump/J-39.png'
    ];

    /**
     * Bilder für den Tod des Charakters.
     * @type {string[]}
     */
    imagesDeath = [
        'assets/2_character_pepe/5_dead/D-51.png',
        'assets/2_character_pepe/5_dead/D-52.png',
        'assets/2_character_pepe/5_dead/D-53.png',
        'assets/2_character_pepe/5_dead/D-54.png',
        'assets/2_character_pepe/5_dead/D-55.png',
        'assets/2_character_pepe/5_dead/D-56.png',
        'assets/2_character_pepe/5_dead/D-57.png'
    ];

    /**
     * Bilder für den Schmerz-Zustand des Charakters.
     * @type {string[]}
     */
    imagesHurt = [
        'assets/2_character_pepe/4_hurt/H-41.png',
        'assets/2_character_pepe/4_hurt/H-42.png',
        'assets/2_character_pepe/4_hurt/H-43.png'
    ];

    /**
     * Bilder für den langen Idle-Zustand des Charakters.
     * @type {string[]}
     */
    imagesLongIdle = [
        'assets/2_character_pepe/1_idle/long_idle/I-11.png',
        'assets/2_character_pepe/1_idle/long_idle/I-12.png',
        'assets/2_character_pepe/1_idle/long_idle/I-13.png',
        'assets/2_character_pepe/1_idle/long_idle/I-14.png',
        'assets/2_character_pepe/1_idle/long_idle/I-15.png',
        'assets/2_character_pepe/1_idle/long_idle/I-16.png',
        'assets/2_character_pepe/1_idle/long_idle/I-17.png',
        'assets/2_character_pepe/1_idle/long_idle/I-18.png',
        'assets/2_character_pepe/1_idle/long_idle/I-19.png',
        'assets/2_character_pepe/1_idle/long_idle/I-20.png'
    ];

     /**
     * Überprüft die X-Position des Charakters und steuert die Bewegungen.
     */
    checkCharacterPosX() {
        if (!(this.posX >= 2070) && !this.world.cameraDriveDone) {
            this.characterMovements();
        }
        this.world.checkEndbossTrigger();
        if (this.world.angerDone) {
            this.characterMovements();
            this.world.level.endboss.endbossFight();
        }
    }

    /**
     * Führt die Bewegungen des Charakters aus, basierend auf den Eingaben und Zuständen.
     */
    characterMovements() {
        if (!this.world.level.endboss.dead) {
            this.startThrow();
            this.animateIdle();
        }
        this.animateMovement();
        this.applyGravity();
        this.animateJump();
    }

    /**
     * Überprüft Kollisionen des Charakters mit Blöcken (z.B. Felsen) im Spiel.
     */
    checkCollisionsBlock() {
        this.world.level.rocks.forEach(rock => {
            this.isCollidingBlock(rock);
            if (this.Bottles.length > 0) {
                this.Bottles.forEach(bottle => {
                    bottle.isCollidingBlock(rock, bottle);
                });
            }
            this.world.level.enemies.forEach(enemy => {
                enemy.isCollidingBlock(rock);
            });
        });
    }

    /**
     * Überprüft Kollisionen des Charakters mit Feinden.
     */
    checkCollisionsEnemy() {
        let collisionDetected = false;
        this.world.level.enemies.forEach(enemy => {
            if (this.posY < 200 && this.fall) {
                if (this.isCollidingTop(enemy) && this.energy > 0 && !enemy.dead && enemy instanceof Chicken) {
                    enemy.dead = true;
                } else if (this.isColliding(enemy) && this.energy > 0 && !enemy.dead) {
                    collisionDetected = true;
                    this.handleEnemyCollision();
                }
            } else if (this.isColliding(enemy) && this.energy > 0 && !enemy.dead) {
                collisionDetected = true;
                this.handleEnemyCollision();
            }
        });
        if (this.isColliding(this.world.level.endboss)) {
            collisionDetected = true;
            this.handleEndbossCollision();
        }
        if (!collisionDetected) {
            this.handleNoCollision();
        }
    }

    /**
     * Behandelt Kollisionen mit Feinden, reduziert Energie und spielt einen Sound ab.
     */
    handleEnemyCollision() {
        this.hurt = true;
        this.energy -= 0.2;
        if (SoundOn) {
            this.world.sounds.OuchSound.play();
        }
        if (this.energy >= 10) {
            this.animateHurt();
        }
    }

    /**
     * Behandelt Kollisionen mit dem Endboss, reduziert Energie und spielt einen Sound ab.
     */
    handleEndbossCollision() {
        this.hurt = true;
        if (this.energy >= 0 && !this.world.level.endboss.dead) {
            this.energy -= 0.4;
        }
        if (this.energy >= 5) {
            this.animateHurt();
            if (SoundOn) {
                this.world.sounds.OuchSound.play();
            }
        }
    }

    /**
     * Behandelt den Fall, dass keine Kollisionen erkannt wurden.
     */
    handleNoCollision() {
        this.hurt = false;
        this.world.sounds.OuchSound.pause();
    }

    /**
     * Animiert den Charakter im Idle-Zustand (Standby).
     */
    animateIdle() {
        if (this.alive && !this.hurt && !this.fall) {
            if (!this.keyboard.rechts && !this.keyboard.links && !this.keyboard.jump) {
                if (!this.soundWalking.paused) {
                    this.soundWalking.pause();
                    this.soundWalking.currentTime = 0; // Setzt den Sound zurück
                }
                this.setIdleTimer();
                if (!this.longIdleActivated) {
                    this.currentImageIdle = this.animatePepe(this.imagesIdle, this.currentImageIdle);
                } else {
                    this.currentImageLongIdle = this.animatePepe(this.imagesLongIdle, this.currentImageLongIdle);
                }
            } else {
                this.clearIdleTimer();
            }
        }
    }

    /**
     * Setzt einen Timer für den Long-Idle-Zustand des Charakters.
     */
    setIdleTimer() {
        if (!this.longIdleTimeoutStarted) {
            this.longIdleTimeoutStarted = true;
            this.longIdleTimer = setTimeout(() => {
                // Setze das Flag für Long-Idle nach 10 Sekunden
                this.longIdleActivated = true;
            }, 10000);
        }
    }

    /**
     * Löscht den Long-Idle-Timer, wenn der Charakter sich bewegt.
     */
    clearIdleTimer() {
        if (this.longIdleTimeoutStarted) {
            clearTimeout(this.longIdleTimer);
            this.longIdleTimeoutStarted = false;
            this.longIdleActivated = false;
        }
    }

    /**
     * Animiert den Charakter, wenn er verletzt wurde.
     */
    animateHurt() {
        if (this.hurt && this.alive) {
            this.currentImageHurt = this.animatePepe(this.imagesHurt, this.currentImageHurt);
        }
    }

    /**
     * Animiert den Charakter basierend auf einem gegebenen Bildarray.
     * 
     * @param {Array} array - Das Array der Bildpfade für die Animation.
     * @param {number} imageCounter - Der Zähler für das aktuelle Bild.
     * @returns {number} Der aktualisierte Zähler für das Bild.
     */
    animatePepe(array, imageCounter) {
        const currentTime = Date.now();
        if (currentTime - this.lastFrameTime >= this.frameInterval) {
            let path = array[imageCounter];
            if (path) {
                this.img = this.images[path];
                imageCounter++;
            }
            if (imageCounter >= array.length) {
                imageCounter = 0;
            }
            this.lastFrameTime = currentTime;
        }
        return imageCounter;
    }

    /**
     * Überprüft, ob der Charakter gestorben ist (Energie <= 0).
     */
    checkDeath() {
        if (this.energy <= 0 && this.alive) {
            this.currentImageDeath = this.animatePepe(this.imagesDeath, this.currentImageDeath);
            if (SoundOn) {
                this.world.sounds.pepeDead.play();
            }
            if (!this.Lost && !this.timeoutStarted) {
                this.timeoutStarted = true;
                setTimeout(() => {
                    this.world.sounds.pepeDead.pause()
                    this.alive = false;
                    setTimeout(() => {
                        this.Lost = true;
                        this.world.keyboard.lost = true;
                        this.world.keyboard.toggleListeners();
                    }, 1500);
                }, 2000);
            }
        }
    }

    /**
     * Animiert die Bewegung des Charakters (Gehen, Springen).
     */
    animateMovement() {
        if (!this.fall) {
            this.speedY = 0;
        }
        if (!this.timeoutStarted) {
            if (this.keyboard.rechts && !this.world.level.endboss.dead) {
                this.handleWalk(this.walkRight());
                this.speed = 3;
            }
            if (this.keyboard.links && !this.world.level.endboss.dead) {
                this.handleWalk(this.walkLeft());
                this.speed = 3;
            }
            if (this.shouldJump()) {
                this.collisionY = false;
                this.jump();
            }
        }
    }

    /**
     * Bestimmt, ob der Charakter springen sollte.
     * 
     * @returns {boolean} - Ob der Charakter springen sollte.
     */
    shouldJump() {
        const jumpingCondition = this.keyboard.jump && !this.fall;
        const blockCondition = this.collisionY && this.keyboard.jump && this.fallOnBlock && this.speedY === 0;
        const endBossCondition = this.world.level.endboss.dead && this.speedY === 0;

        return jumpingCondition || blockCondition || endBossCondition;
    }

    /**
     * Startet den Wurf einer Flasche, wenn der Charakter dies tun kann.
     */
    startThrow() {
        const currentTime = Date.now();
        if (this.canThrowBottle(currentTime)) {
            if (!this.otherDirection) {
                const directionRight = true;
                this.Bottles.push(new BottleThrown(this, directionRight, false));
                this.lastThrowTime = currentTime;
                this.bottleCounter--;
            } else {
                const directionRight = false;
                this.Bottles.push(new BottleThrown(this, directionRight, false));
                this.lastThrowTime = currentTime;
                this.bottleCounter--;
            }
        }
    }

    /**
     * Bestimmt, ob der Charakter eine Flasche werfen kann.
     * 
     * @param {number} currentTime - Der aktuelle Zeitstempel.
     * @returns {boolean} - Ob der Charakter eine Flasche werfen kann.
     */
    canThrowBottle(currentTime) {
        return this.keyboard.throw &&
            (currentTime - this.lastThrowTime >= 1000) &&
            this.alive &&
            this.bottleCounter > 0;
    }

    /**
     * Behandelt die Bewegung des Charakters.
     * 
     * @param {Function} funct - Die Funktion zur Ausführung der Bewegung.
     */
    handleWalk(funct) {
        funct;
        if (!this.hurt && !this.fall) {
            this.currentImageWalk = this.animatePepe(this.imagesWalk, this.currentImageWalk);

            if (SoundOn && this.soundWalking.paused) { // Nur abspielen, wenn er pausiert ist
                this.soundWalking.play().catch(err => console.warn("Playback Error:", err));
            }
        }
    }

    /**
     * Animiert den Sprung des Charakters.
     */
    animateJump() {
        const currentTime = Date.now();
        if (((this.keyboard.jump || this.fall) && !this.collisionY && this.alive) || this.world.level.endboss.dead) {
            this.soundWalking.pause();
            if (currentTime - this.lastFrameTime >= this.frameInterval) {
                this.currentImageJump = this.animatePepe(this.imagesJump, this.currentImageJump);
            }
        }
    }

    /**
     * Bewegt den Charakter nach rechts.
     */
    walkRight() {
        this.otherDirection = false;
        const newPosition = this.posX += this.speed;
        if (newPosition >= level1.levelEndX) {
            this.posX = level1.levelEndX;
        } else {
            this.posX = newPosition;
        }
    }

    /**
     * Bewegt den Charakter nach links.
     */
    walkLeft() {
        this.otherDirection = true;
        const newPosition = this.posX -= this.speed;
        if (newPosition <= -10) {
            this.posX = - 10;
        } else if (this.world.cameraDriveDone && (newPosition <= 2070)) {
            this.posX = 2070;
        } else {
            this.posX = newPosition;
        }
    }
}
